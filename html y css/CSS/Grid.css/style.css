* {
    margin: 0;
    box-sizing: border-box;
}

body {
    font-family: Arial, Helvetica, sans-serif;
}

.container {
    width: 90%;
    height: 1200px;
    outline: 2px solid;
    margin: 40px auto;
    display: grid;
    /*a la hora de establecer las columnas y filas en css grid se puede usar el valor repeat( cantidad, tamaño) de cada columna o fila
    ejemplo abajo. La unidad de medida fr es de css grid y es una medida fraccionaria*/

    /* grid-template-columns: repeat(5, 1fr); (grid-template-columns: 1fr 1fr 1fr;)
    grid-template-rows: repeat(5, 1fr); (grid-template-rows: 1fr 1fr 1fr;) */

    /*La palabra clave auto-fit en CSS Grid se utiliza para ajustar las columnas de manera que ocupen todo el espacio disponible, 
    sin dejar espacio restante. A diferencia de auto-fill, que inserta tantas columnas como sea posible, incluso si están vacías, 
    auto-fit ajusta las columnas para que ocupen todo el espacio, respetando siempre los anchos mínimos.*/

    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); /*ejemplo de auto-fit*/

    /*En este caso, la función auto-fit indica al navegador que puede ubicar el número de columnas que quepan en el ancho, siempre y 
    cuando su ancho mínimo sea de 250px. Entonces, cuando la pantalla cambie de tamaño, el navegador modificará automáticamente el 
    número de columnas que haya según el ancho disponible.*/

    gap: 0.5rem;

    /* row-gap: 1rem;
    column-gap: 1rem; */

    /* grid-template-areas: 
    "elemet1 elemet1 elemet1 elemet2 elemet2"
    "elemet1 elemet1 elemet1 elemet2 elemet2"
    "elemet3 elemet3 elemet3 elemet2 elemet2"
    "elemet3 elemet3 elemet3 elemet2 elemet2"
    "elemet4 elemet4 elemet4 elemet4 elemet4"
    ; */

}

.item {
    /* width: 100px;
    height: 100px; */
    color: azure;
    font-size: 2em;
    display: flex;
    align-items: center;
    justify-content: center;
    background-size: cover;
    background-position: center;
}

.item1 {
    background-color: slateblue;
    background-image: url(./img/img1.jpg);
    /* grid-column: linea-inicial / linea-final; */
    /* grid-row: linea-inicial / linea-final; */
    /* grid-column: 1/4; */
    /* grid-row: 1/3; */


}
.item2 {
    background-color: deeppink;
    background-image: url(./img/img2.jpeg);
    /* grid-column: 4/6; */
    /* grid-row: 1/5; */
}
.item3 {
    background-color: seagreen;
    background-image: url(./img/img3.jpeg);
    /* grid-column: 1/4; */
    /* grid-row: 3/5; */
}
.item4 {
    background-color: brown;
    background-image: url(./img/img4.jpeg);
    /* grid-column: 1/-1; (el menos uno hace que abarque toda la linea, para que si se agrega otra columna siempre llegue hasta el final)*/
    /* grid-row: 5/-1;*/
}
.item5 {
    background-color: cornflowerblue;
    background-image: url(./img/img5.jpeg);
}
.item6 {
    background-color: rebeccapurple;
    background-image: url(./img/img6.jpeg);
}


/*

grid-template-columns: Define el tamaño y la cantidad de columnas en la cuadrícula.

grid-template-rows: Define el tamaño y la cantidad de filas en la cuadrícula.

grid-template-areas: Permite asignar áreas específicas a elementos dentro de la cuadrícula.

grid-template: Es un shorthand que combina las propiedades anteriores en una sola declaración.

grid-auto-columns: Define el tamaño automático para columnas no especificadas.

grid-auto-rows: Define el tamaño automático para filas no especificadas.

grid-auto-flow: Controla cómo se distribuyen automáticamente los elementos en la cuadrícula.

gap: Establece el espacio entre las celdas de la cuadrícula. 

row-gap: Establece el espacio entre las filas en la CSS grid

column-gap: Establece el espacio entre las columnas en la CSS grid
*/


/*

Que es CSS GRID? (ref- img/grid1)

CSS Grid layout (Sistema de cuadriculas) es el sistema de diseño mas poderoso disponible en CSS. Esto
gracias a su sistema bidimensional, lo que significa que puede manejar tanto columnas como filas.

Filas y Columnas (ref- img/grid2)

Se le llama Grid, porque se utilizan filas y columnas, estas filas y columnas crean una cuadricula, 
cada fila y columna esta formada por dos lineas (Grid-lines), es decir columna van haber 2 lineas y
por cada fila van haber 2 lineas. si hay 3 columnas y 3 filas, van haber 4 lineas de columna y 4 lineas de fila.

Celdas en GRID (ref- img/grid3)

Para empezar a entender GRID, debes verlo como una cuadricula, compuesta de muchas celdas, al principio los grid-item
ocuparan una celda por cada grid-item.

Lineas en GRID (ref- img/grid4)

CSS GRID, trabaja en forma de una cuadricula (grid), las cuadriculas estan compuestas de lineas, lineas verticales y 
lineas horizontales (column grid lines, row grid lines).

Grid Areas (ref- img/grid5)

Es el espacio entre cuatro grid lines, un grid area puede estar formado por el numero que sea de celdas, pero un
grid area siempre debe ser rectangular o cuadrado.



*/














